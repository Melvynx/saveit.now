// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  stripeCustomerId String?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  onboarding       Boolean   @default(false)
  unsubscribed     Boolean   @default(false)
  sessions         Session[]
  accounts         Account[]
  apikeys          Apikey[]
  tags             Tag[]
  bookmarks        Bookmark[]
  bookmarkOpens    BookmarkOpen[]
  subscriptions    Subscription[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Apikey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

  @@map("apikey")
}

enum TagType {
  USER
  IA
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  userId String
  user   User    @relation(fields: [userId], references: [id])
  type   TagType @default(IA)

  bookmarks BookmarkTag[]

  @@unique([userId, name])
}

model BookmarkTag {
  bookmarkId String
  tagId      String

  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([bookmarkId, tagId])
}

enum BookmarkType {
  VIDEO      // @deprecated - will be processed as PAGE
  BLOG       // @deprecated - will be processed as PAGE
  ARTICLE
  PAGE
  POST       // @deprecated - will be processed as PAGE
  IMAGE
  YOUTUBE
  TWEET
  PDF
}

enum BookmarkStatus {
  PENDING
  PROCESSING
  READY
  ERROR
}

model Bookmark {
  id     String @id @default(ulid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  url  String
  type BookmarkType?

  title          String?
  titleEmbedding Unsupported("vector(1536)")?

  summary          String?

  note    String?
  preview String?

  vectorSummary          String?
  vectorSummaryEmbedding Unsupported("vector(1536)")?

  imageDescription String?

  faviconUrl    String?
  ogImageUrl    String?
  ogDescription String?

  metadata Json?

  status       BookmarkStatus @default(PENDING)
  inngestRunId String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  starred      Boolean        @default(false)
  read         Boolean        @default(false)

  tags BookmarkTag[]

  opens BookmarkOpen[]

  BookmarkChunk BookmarkChunk[]
}

model BookmarkChunk {
  id         String                       @id @default(nanoid(7))
  bookmarkId String
  idx        Int
  content    String
  embedding  Unsupported("vector(1536)")?

  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
}

model BookmarkOpen {
  id         String   @id @default(nanoid(7))
  bookmarkId String
  userId     String
  openedAt   DateTime @default(now())

  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([bookmarkId, userId])
  @@index([userId, openedAt])
}

model Subscription {
  id                   String    @id
  plan                 String
  referenceId          String
  user                 User      @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?

  @@map("subscription")
}