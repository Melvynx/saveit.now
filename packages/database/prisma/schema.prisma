// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  tags          Tag[]
  bookmarks     Bookmark[]
  bookmarkOpens BookmarkOpen[]
  onboarding    Boolean        @default(false)

  stripeCustomerId String?

  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  subscriptions Subscription[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum TagType {
  USER
  IA
}

/// Tag unique **par user** (ex: user A peut avoir “Design”, user B aussi)

model Tag {
  id     String  @id @default(cuid())
  name   String
  userId String
  user   User    @relation(fields: [userId], references: [id])
  type   TagType @default(IA)

  /// pivot
  bookmarks BookmarkTag[]

  @@unique([userId, name])
}

model BookmarkTag {
  bookmarkId String
  tagId      String

  /// relations
  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([bookmarkId, tagId])
}

enum BookmarkType {
  VIDEO // YouTube, Loom, mp4…
  BLOG // Article markdown
  ARTICLE // Clean article content
  PAGE // Page web générique
  POST // Tweet, LinkedIn, Bluesky…
  IMAGE // PNG, JPG, etc.
  YOUTUBE // YouTube
  TWEET // Twitter
  PDF // PDF documents
}

enum BookmarkStatus {
  PENDING // Scraping/IA pas terminé
  PROCESSING // IA en cours
  READY // Tout OK, searchable
  ERROR // Scraping KO
}

model Bookmark {
  id     String @id @default(ulid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Core
  url  String
  type BookmarkType?

  title          String?
  titleEmbedding Unsupported("vector(1536)")?

  summary          String?

  note    String?
  preview String? // URL ou markdown ou résumé → chaîne UTF‑8

  vectorSummary          String?
  vectorSummaryEmbedding Unsupported("vector(1536)")?

  imageDescription String?

  faviconUrl    String?
  ogImageUrl    String?
  ogDescription String?

  metadata Json? // open field pour extras

  // Gestion
  status       BookmarkStatus @default(PENDING)
  inngestRunId String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  starred      Boolean        @default(false)
  read         Boolean        @default(false)

  // Tags
  tags BookmarkTag[]

  // Opens tracking
  opens BookmarkOpen[]

  // To delete
  BookmarkChunk BookmarkChunk[]
}

model BookmarkChunk {
  id         String                       @id @default(nanoid(7))
  bookmarkId String
  idx        Int // 0‑based order
  content    String
  embedding  Unsupported("vector(1536)")?

  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
}

model BookmarkOpen {
  id         String   @id @default(nanoid(7))
  bookmarkId String
  userId     String
  openedAt   DateTime @default(now())

  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([bookmarkId, userId])
  @@index([userId, openedAt])
}

model Subscription {
  id                   String    @id
  plan                 String
  referenceId          String
  user                 User      @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?

  @@map("subscription")
}
