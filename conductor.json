{
  "scripts": {
    "setup": "#!/bin/bash\n\n# Conductor setup script for saveit.now-mono\n# Runs when a workspace is created. Used for copying .env files and installing dependencies.\n\nset -e\n\n# Get the workspace name from environment variable\nWORKSPACE_NAME=\"${CONDUCTOR_WORKSPACE_NAME}\"\n\n# Ensure workspace name is provided\nif [ -z \"$WORKSPACE_NAME\" ]; then\n    echo \"Error: CONDUCTOR_WORKSPACE_NAME is not set\"\n    exit 1\nfi\n\necho \"Setting up SaveIt.now workspace: $WORKSPACE_NAME\"\n\n# Function to copy and update .env file with database URL replacement\nupdate_env_file() {\n    local env_path=$1\n    local root_env_path=\"$CONDUCTOR_ROOT_PATH/$env_path\"\n    \n    if [ -f \"$root_env_path\" ]; then\n        cp \"$root_env_path\" \"$env_path\"\n        echo \"‚úÖ Copied $env_path\"\n        \n        # Update database URL with workspace-specific name\n        if grep -q \"^DATABASE_URL=\" \"$env_path\"; then\n            NEW_DB_NAME=\"saveit.now2-$WORKSPACE_NAME\"\n            sed -i.bak \"s|^DATABASE_URL=\\\"postgresql://melvynx:@localhost:5432/saveit\\.now2\\\"|DATABASE_URL=\\\"postgresql://melvynx:@localhost:5432/$NEW_DB_NAME\\\"|\" \"$env_path\"\n            echo \"‚úÖ Updated DATABASE_URL in $env_path to use: $NEW_DB_NAME\"\n            rm -f \"$env_path.bak\"\n        fi\n    else\n        echo \"‚ö†Ô∏è  Warning: $root_env_path not found\"\n    fi\n}\n\n# Copy and update .env files\necho \"Copying .env files...\"\n\n# Update packages/database/.env\nupdate_env_file \"packages/database/.env\"\n\n# Update apps/web/.env  \nupdate_env_file \"apps/web/.env\"\n\n# Copy other .env files without modification (mobile app doesn't use database)\nif [ -f \"$CONDUCTOR_ROOT_PATH/apps/mobile/.env\" ]; then\n    cp \"$CONDUCTOR_ROOT_PATH/apps/mobile/.env\" \"apps/mobile/.env\"\n    echo \"‚úÖ Copied apps/mobile/.env\"\nfi\n\nif [ -f \"$CONDUCTOR_ROOT_PATH/apps/mobile/.env.development\" ]; then\n    cp \"$CONDUCTOR_ROOT_PATH/apps/mobile/.env.development\" \"apps/mobile/.env.development\"\n    echo \"‚úÖ Copied apps/mobile/.env.development\"\nfi\n\nif [ -f \"$CONDUCTOR_ROOT_PATH/apps/mobile/.env.production\" ]; then\n    cp \"$CONDUCTOR_ROOT_PATH/apps/mobile/.env.production\" \"apps/mobile/.env.production\"\n    echo \"‚úÖ Copied apps/mobile/.env.production\"\nfi\n\n# Install dependencies\necho \"Installing dependencies...\"\npnpm install\n\n# Generate Prisma client\necho \"Generating Prisma client...\"\npnpm --filter=database prisma:generate\n\n# Create the new database\nNEW_DB_NAME=\"saveit.now2-$WORKSPACE_NAME\"\necho \"Creating database: $NEW_DB_NAME\"\ncreatedb -U melvynx \"$NEW_DB_NAME\"\n\n# Dump original database and import to new one\necho \"Copying data from original database...\"\nORIGINAL_DB=\"saveit.now2\"\n\n# Check if original database exists\nif psql -U melvynx -lqt | cut -d \\| -f 1 | grep -qw \"$ORIGINAL_DB\"; then\n    echo \"Found original database '$ORIGINAL_DB', copying data...\"\n    \n    # Dump original database and pipe directly to new database\n    pg_dump -U melvynx --no-owner --no-privileges \"$ORIGINAL_DB\" | psql -U melvynx \"$NEW_DB_NAME\"\n    \n    echo \"‚úÖ Data copied from '$ORIGINAL_DB' to '$NEW_DB_NAME'\"\nelse\n    echo \"‚ö†Ô∏è  Original database '$ORIGINAL_DB' not found, running migrations instead...\"\n    # Run database migrations if no original database to copy from\n    pnpm --filter=database prisma:migrate:deploy\nfi\n\necho \"üéâ SaveIt.now workspace '$WORKSPACE_NAME' setup completed successfully!\"\necho \"Database: $NEW_DB_NAME\"\necho \"Ready to start development with: pnpm dev\"",
    "archive": "#!/bin/bash\n\n# Conductor archive script for saveit.now-mono\n# Runs when a workspace is archived. Used for cleaning up external resources.\n\nset -e\n\n# Get the workspace name from environment variable\nWORKSPACE_NAME=\"${CONDUCTOR_WORKSPACE_NAME}\"\n\n# Ensure workspace name is provided\nif [ -z \"$WORKSPACE_NAME\" ]; then\n    echo \"Error: CONDUCTOR_WORKSPACE_NAME is not set\"\n    exit 1\nfi\n\necho \"Archiving SaveIt.now workspace: $WORKSPACE_NAME\"\n\n# Function to extract database name from .env file\nget_db_name_from_env() {\n    local env_file=$1\n    if [ -f \"$env_file\" ]; then\n        local db_name=$(grep \"^DATABASE_URL=\" \"$env_file\" | sed 's/.*postgresql:\\/\\/melvynx:@localhost:5432\\///; s/\".*//')\n        if [ -n \"$db_name\" ]; then\n            echo \"$db_name\"\n            return 0\n        fi\n    fi\n    return 1\n}\n\n# Try to get database name from packages/database/.env first, then apps/web/.env\nDB_NAME=\"\"\nif DB_NAME=$(get_db_name_from_env \"packages/database/.env\"); then\n    echo \"Found database name in packages/database/.env: $DB_NAME\"\nelif DB_NAME=$(get_db_name_from_env \"apps/web/.env\"); then\n    echo \"Found database name in apps/web/.env: $DB_NAME\"\nelse\n    # Fallback to expected name\n    DB_NAME=\"saveit.now2-$WORKSPACE_NAME\"\n    echo \"No DATABASE_URL found in .env files, using expected database name: $DB_NAME\"\nfi\n\necho \"Cleaning up database: $DB_NAME\"\n\n# Check if database exists before trying to drop it\nif psql -U melvynx -lqt | cut -d \\| -f 1 | grep -qw \"$DB_NAME\"; then\n    echo \"Database $DB_NAME found, dropping...\"\n    \n    # Terminate all connections to the database before dropping\n    psql -U melvynx -d postgres -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DB_NAME';\"\n    \n    # Drop the database\n    dropdb -U melvynx \"$DB_NAME\"\n    \n    echo \"‚úÖ Database $DB_NAME successfully deleted\"\nelse\n    echo \"‚ö†Ô∏è  Database $DB_NAME not found, skipping deletion\"\nfi\n\necho \"üóëÔ∏è  SaveIt.now workspace '$WORKSPACE_NAME' archived and cleaned up successfully!\""
  }
}
